{"version":3,"sources":["src/index.js"],"names":["fs","ver","fpath","input","split","verboseEnable","panic","code","println","start","root","files","folders","test","document","addEventListener","event","defaultPrevented","keyCode","printHTML","handleCommand","substring","length","getElementById","innerText","print","key","preventDefault","displayOS","text","innerHTML","convertPath","path","pathsplit","r","i"],"mappings":";;;AA2QA,aA1QA,QAAA,gBAGA,IAAIA,EAAK,KACLC,EAAM,KACNC,EAAQ,KACRC,EAAQ,GACRC,EAAQ,GACRC,GAAgB,EAEpB,SAASC,EAAMC,GAEbC,EAAQ,0BAA4BD,GAItC,SAASE,KAEPR,EAAM,SAWAI,IAEFG,EAAQ,+CAAiDP,GAEzDO,EAAQ,sCAAwCP,KAGlDC,EAAQ,OAWFG,IAEFG,EAAQ,iDAAmDN,GAE3DM,EAAQ,uCAGVR,EAAK,CACHU,KAAM,CACJC,MAAO,CACO,WAAA,kBAEdC,QAAS,CACPC,KAAM,CACJF,MAAO,CACY,gBAAA,6BAEnBC,QAAS,SAeXP,IAEFG,EAAQ,+CACRA,EAAQ,4CACRA,EAAQ,2BACRA,EAAQ,oCAGVM,SAASC,iBACP,UACA,SAACC,GAEKA,IAAAA,EAAMC,iBAAND,CAKAA,GAAkB,KAAlBA,EAAME,QAERC,EAAU,UAEVhB,GAAS,SAEJ,GAAsB,KAAlBa,EAAME,QAGfV,EAAQ,IAERY,EAAcjB,GAEdA,EAAQ,QAEH,GAAsB,IAAlBa,EAAME,QAEff,EAAQA,EAAMkB,UAAU,EAAGlB,EAAMmB,OAAS,GAE1CR,SAASS,eACP,aACAC,UAAYV,SACXS,eAAe,aACfC,UAAUH,UACT,EACAP,SAASS,eAAe,aAAaC,UAAUF,OAAS,OAIvD,CAAA,GAAIN,EAAME,QAAU,GAAI,OAIxB,GAAIF,EAAME,SAAW,IAAMF,EAAME,SAAW,GAAI,OAMrDO,EAAMT,EAAMU,KAEZvB,GAASa,EAAMU,IAGjBV,EAAMW,oBAER,GAGGtB,GAEHG,EAAQ,oBAAsBP,EAAM,KAGtC2B,MA/EAtB,EAAM,GAEFD,GAEFG,EAAQ,6CApCZF,EAAM,GAEFD,GAEFG,EAAQ,+CAtBZF,EAAM,GAEFD,GAEFG,EAAQ,2CAoId,SAASiB,EAAMI,GAEbf,SAASS,eAAe,aAAaC,WAAaK,EAIpD,SAASV,EAAUU,GAEjBf,SAASS,eAAe,aAAaO,WAAaD,EAGpD,SAASrB,EAAQqB,GAEff,SAASS,eAAe,aAAaC,WACnCK,EADF,OAOF,SAASD,IAEPT,EAAUjB,EAAQ,YAIpB,SAASkB,EAAcjB,GAIJ,YAFjBC,EAAQD,EAAMC,MAAM,MAEV,GAES,UAAbA,EAAM,GAERI,EAAQuB,EAAY7B,IAEE,SAAbE,EAAM,GAEfF,EAAQE,EAAM,GAEQ,SAAbA,EAAM,GAEfI,EAAQ,iCAEc,QAAbJ,EAAM,GAEfU,SAASS,eAAe,aAAaC,UAAY,GAmB3B,UAAbpB,EAAM,GAEfE,EAAMF,EAAM,IAEU,SAAbA,EAAM,GAEfI,EAAQJ,EAAM,IAIdI,EAAQ,6DAKVA,EAAQ,mBAGVW,EAAUjB,EAAQ,YAElBE,EAAQ,GAIV,SAAS2B,EAAYC,GAMd,IAJDC,IAAAA,EAAYD,EAAK5B,MAAM,MAEvB8B,EAAI,UAECC,EAAI,EAAGA,EAAIF,EAAUX,OAAQa,IAEpCD,GAAK,IAELA,GAAKD,EAAUE,GAKVD,OAFPA,EAAIA,EAAEb,UAAU,EAAGa,EAAEZ,OAAS,GAMhCb","file":"src.f98c844c.js","sourceRoot":"..","sourcesContent":["// Import stylesheets\nimport \"./styles.css\";\n\n// Define variables\nvar fs = null;\nvar ver = null;\nvar fpath = null;\nvar input = \"\";\nvar split = {};\nvar verboseEnable = true;\n// Kernel Panic\nfunction panic(code) {\n  // Print the panic to the DOM\n  println(`kernel panic with code ` + code);\n}\n\n// Start the operating system\nfunction start() {\n  // Define the version\n  ver = \"r0.1\";\n  if (!ver) {\n    // Kernel Panic if ver fails to initilize\n    panic(7);\n    // Check if verbose boot is enabled\n    if (verboseEnable) {\n      // Tell the user that the bootup process failed\n      println('verbose: failed to init variable \"ver\"');\n    }\n  } else {\n    // Check if verbose boot is enabled\n    if (verboseEnable) {\n      // Let the user know the variable has been initilalized\n      println('verbose: successfully set variable \"ver\" to ' + ver);\n      // Display a makeshift welcome\n      println(\"verbose: webos version reported as \" + ver);\n    }\n    // Define the current file path\n    fpath = \"\\\\\";\n    if (!fpath) {\n      // Kernel Panic if fpath fails to initilize\n      panic(7);\n      // Check if verbose boot is enabled\n      if (verboseEnable) {\n        // Tell the user that the bootup process failed\n        println('verbose: failed to init variable \"fpath\"');\n      }\n    } else {\n      // Check if verbose boot is enabled\n      if (verboseEnable) {\n        // Let the user know the variable has been initilalized\n        println('verbose: successfully set variable \"fpath\" to ' + fpath);\n        // Let the user know that the file system being is being loaded\n        println('verbose: trying to load \"fs.json\"');\n      }\n      // Terrible makeshift solution because I couldn't figure out how to import the JSON file\n      fs = {\n        root: {\n          files: {\n            \"test.txt\": \"\\\\fs\\\\test.txt\"\n          },\n          folders: {\n            test: {\n              files: {\n                \"othertest.txt\": \"\\\\fs\\\\test\\\\othertest.txt\"\n              },\n              folders: {}\n            }\n          }\n        }\n      };\n      if (!fs) {\n        // Kernel Panic if fs fails to initilize\n        panic(7);\n        // Check if verbose boot is enabled\n        if (verboseEnable) {\n          // Let the user know the \"file loading\" has failed\n          println('verbose: failed to load file \"fs.json\"');\n        }\n      } else {\n        // Check if verbose boot is enabled\n        if (verboseEnable) {\n          // Alert the user that a ton of stuff is happening\n          println('verbose: successfully loaded file \"fs.json\"');\n          println(\"verbose: trying to construct file system\");\n          println(\"verbose: loading prompt\");\n          println(\"verbose: adding event listeners\");\n        }\n        // Add a keydown event listener (aka keyboard driver)\n        document.addEventListener(\n          \"keydown\",\n          (event) => {\n            // Check if the event has already been handled\n            if (event.defaultPrevented) {\n              // Abort the function\n              return;\n            }\n            // Check if the spacebar has been pressed\n            if (event.keyCode === 32) {\n              // Print a non-breaking space\n              printHTML(\"&nbsp;\");\n              // Add the space to the internal\n              input += \" \";\n              // Check if enter has been pressed\n            } else if (event.keyCode === 13) {\n              // console.log(\"Enter\"); some debugging junk\n              // Print a new line\n              println(\"\");\n              // Send a handle request\n              handleCommand(input);\n              // Clear the input\n              input = \"\";\n              // Check if the delete key has been pressed\n            } else if (event.keyCode === 8) {\n              // Substring the input (tbh, pretty hacky)\n              input = input.substring(0, input.length - 1);\n              // Substring the DOM (even more hacky)\n              document.getElementById(\n                \"kernelout\"\n              ).innerText = document\n                .getElementById(\"kernelout\")\n                .innerText.substring(\n                  0,\n                  document.getElementById(\"kernelout\").innerText.length - 1\n                );\n              // console.log(input); more debbuging junk\n              // Check if the keycode is less than 31, to elimate characters like Control\n            } else if (event.keyCode < 31) {\n              // Abort the function\n              return;\n              // Check if the arrow keys have been pressed, as to not print them\n            } else if (event.keyCode >= 37 && event.keyCode <= 40) {\n              // Abort the function\n              return;\n              // Otherwise, handle the key normally\n            } else {\n              // Print the key to the DOM\n              print(event.key);\n              // Add the key to the internal field\n              input += event.key;\n            }\n            // Prevent double-handling\n            event.preventDefault();\n          },\n          false\n        );\n        // Check if verbose is disabled\n        if (!verboseEnable) {\n          // Print a better welcome message if so\n          println(\"Welcome to WebOS \" + ver + \"!\");\n        }\n        // Display the prompt\n        displayOS();\n      }\n    }\n  }\n}\n\n// Print function\nfunction print(text) {\n  // Add the text directly to the DOM\n  document.getElementById(\"kernelout\").innerText += text;\n}\n\n// Print HTML function\nfunction printHTML(text) {\n  // Add HTML data to the DOM\n  document.getElementById(\"kernelout\").innerHTML += text;\n}\n// Print line function\nfunction println(text) {\n  // Add line to the DOM\n  document.getElementById(\"kernelout\").innerText +=\n    text /* Add a newline */ +\n    `\n  `;\n}\n\n// Prompt display\nfunction displayOS() {\n  // Print the prompt to the DOM\n  printHTML(fpath + \" $&nbsp;\");\n}\n\n// Command handler\nfunction handleCommand(input) {\n  // Split the command by spaces\n  split = input.split(\" \");\n  // Check if the \"test\" command was run\n  if (split[0] === \"kernel\") {\n    // Check if the path conversion test was run\n    if (split[1] === \"pathc\") {\n      // Print the result of the function to the DOM\n      println(convertPath(fpath));\n      // Check if the directory change test was run\n    } else if (split[1] === \"dirc\") {\n      // Change the path to the second argument\n      fpath = split[2];\n      // Check if the cmdlet list test was run\n    } else if (split[1] === \"cmds\") {\n      // Print the list of all of the supported cmdlets\n      println(\"cmds, dirc, pathc, cls, panic\");\n      // Check if the screen clear test was run\n    } else if (split[1] === \"cls\") {\n      // Clear the DOM\n      document.getElementById(\"kernelout\").innerText = \"\";\n      // Check if the variable set test was run\n      // } else if (split[1] === \"setvar\") {\n      //   // Set the variable specifed by the second argument to the third argument\n      //   var a = eval(split[2]);\n      //   eval(a + \" = \" + split[3]);\n      //   // Add some graphical confromation\n      //   println(\"Variable \" + split[2] + \"'s value has been set to \" + split[3]);\n      //   // console.log(window[split[2]]); more debugging junk\n      //   // Check if the get variable test was run\n      // } else if (split[1] === \"getvar\") {\n      //   // Tell the user what the current value is\n      //   println(\n      //     \"Variable \" +\n      //       split[2] +\n      //       \"'s value is currently set to \" +\n      //       eval(split[2])\n      //   );\n      // Check if the panic test tool was run\n    } else if (split[1] === \"panic\") {\n      // Panic\n      panic(split[2]);\n      // Check if the echo test tool was run\n    } else if (split[1] === \"echo\") {\n      // Print to the DOM\n      println(split[2]);\n      // Check if the user entered an invalid cmdlet name\n    } else {\n      // Tell the user how to get access to a list\n      println(\"Invalid test cmdlet: use cmds for a list of test cmdlets.\");\n    }\n    // Check if an invalid command is inputted\n  } else {\n    // Tell the user that they typed a invalid command\n    println(\"Invalid Command\");\n  }\n  // Print the prompt to the DOM\n  printHTML(fpath + \" $&nbsp;\");\n  // Clear the split variable\n  split = {};\n}\n\n// Convert path function for convert path test tool\nfunction convertPath(path) {\n  // Split the path by backslashes\n  var pathsplit = path.split(\"\\\\\");\n  // Add the variable name\n  var r = \"fs.root\";\n  // Loop through all of the subdirectories\n  for (var i = 1; i < pathsplit.length; i++) {\n    // Add a period\n    r += \".\";\n    // Add the subdirectory name\n    r += pathsplit[i];\n  }\n  // Quick hacky bug fix\n  r = r.substring(0, r.length - 1);\n  // Return the value\n  return r;\n}\n\n// Run the start function\nstart();\n// End of document\n"]}